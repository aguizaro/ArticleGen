services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - web
      - internal

  backend:
    build: ./backend
    container_name: backend
    restart: always
    environment:
      - PORT=3000
      - MONGO_URI=${MONGO_URI}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    depends_on:
      - mongodb
    networks:
      - internal
      - web

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_BACKEND_URL=https://api.${DOMAIN_NAME}
    container_name: frontend
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # Mount custom nginx.conf
    environment:
      - VITE_BACKEND_URL=https://api.${DOMAIN_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`, `www.${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - web
      - internal

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    volumes:
      - mongodb_data:/data/db
    networks:
      - internal

  worker:
    build: ./backend
    container_name: worker
    restart: always
    command: node worker.js
    environment:
      - MONGO_URI=${MONGO_URI}
      - REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
      - mongodb
    networks:
      - internal

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - internal 


volumes:
  mongodb_data:

networks:
  web:
    external: true
  internal:
    internal: true
